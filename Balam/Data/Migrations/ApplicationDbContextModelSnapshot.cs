// <auto-generated />
using System;
using Balam.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Balam.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Balam.Models.Quote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("ApportionDays")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("CalculatedCost")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("CalculatedPrice")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("Cleaning")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("Client");

                    b.Property<decimal>("CompetitionPrice")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("Date");

                    b.Property<int>("Days");

                    b.Property<float>("DaysPerMonth");

                    b.Property<string>("Description");

                    b.Property<string>("Destination");

                    b.Property<double>("Distance");

                    b.Property<bool>("DriverIncluded");

                    b.Property<decimal>("DriverTravelExpenses")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("DriverWage")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("FinalPrice")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("Fund")
                        .HasColumnType("decimal(18,6)");

                    b.Property<float>("GasMileage");

                    b.Property<decimal>("GasPrice")
                        .HasColumnType("decimal(18,6)");

                    b.Property<bool>("GasolineIncluded");

                    b.Property<decimal>("Instalment")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("Maintenance")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("OtherCosts")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("Parking")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("Passengers");

                    b.Property<decimal>("PhoneLine")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("Profit")
                        .HasColumnType("decimal(6,3)");

                    b.Property<decimal>("Provisioning")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("ProvisioningDays");

                    b.Property<string>("State");

                    b.Property<decimal>("TargetProfit")
                        .HasColumnType("decimal(6,3)");

                    b.Property<decimal>("Taxes")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("Toll")
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("Id");

                    b.ToTable("Quote");
                });

            modelBuilder.Entity("Balam.Models.Settings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Cleaning")
                        .HasColumnType("decimal(18,6)");

                    b.Property<float>("DaysPerMonth");

                    b.Property<decimal>("DriverTravelExpenses")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("DriverWage")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("Fund")
                        .HasColumnType("decimal(18,6)");

                    b.Property<float>("GasMileage");

                    b.Property<decimal>("GasPrice")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("Instalment")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("Maintenance")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("OtherCosts")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("Parking")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("Passengers");

                    b.Property<decimal>("PhoneLine")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("Provisioning")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("TargetProfit")
                        .HasColumnType("decimal(6,3)");

                    b.Property<decimal>("Taxes")
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
